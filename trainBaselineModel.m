%% Baseline Model Script
% Ethan L. Edmunds, Nov 2024
function [baseMdl, baseMdl_info] = trainBaselineModel(trainData, valData, aux_params, hyper_params, filename)

    num_layers = hyper_params(1); % Initialize the number of layers to be used in the neural network
    num_filters = hyper_params(2); % Intiialize the number of filters to be used in the neural network

    hyper_params_baseline = [num_layers, num_filters];

    % Initialise baseline options
    baseline_options = trainingOptions("adam", ...
        "MiniBatchSize", 128, ...
        "InitialLearnRate", 0.001, ...
        "MaxEpochs", 1, ...
        "Shuffle", "every-epoch", ...
        "ValidationData", valData, ...
        "Verbose", true, ...
        "ValidationPatience", 100, ...
        "Metrics", ["accuracy", "recall"], ...
        "OutputNetwork", "best-validation", ...
        "ValidationFrequency", 5, ...
        "Plots", "training-progress", ...
        "ExecutionEnvironment", "parallel");

    baselineModelArchitecture = createNetworkModel(hyper_params_baseline, aux_params); % Create the baseline network model architecture

    [baseMdl, baseMdl_info] = trainnet(trainData, baselineModelArchitecture, "crossentropy", baseline_options); % Train the network model

    parent_folder = "model_information"; % Declare parent folder to hold model information
    filename = filename + "_" + string(num_layers) + "_" + string(num_filters); % Declare filename (filename + number of layers + number of filters)

    fullFileName = fullfile(parent_folder, filename);

    save(fullFileName,"baseMdl", "baseMdl_info");
    cons=[];

end